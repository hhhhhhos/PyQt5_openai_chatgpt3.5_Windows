# -*- coding: utf-8 -*-
import random

# Form implementation generated from reading ui file 'chat.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtCore import QThread, Qt
import time
import openai


# 存放历史对话
history = []
from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimedia
from PyQt5.QtGui import QIcon
# windows下任务栏图标失效 加上这一句才生效
import ctypes
ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID("myappid")

import sqlite3
# 数据库连接 没有的话会新建
conn = sqlite3.connect('mrsoft.db')
# 游标对象
cursor = conn.cursor()
cursor.execute('select content from biao1 where id =?', ('api',))
result98 = cursor.fetchall()
openai.api_key = result98[0][0]
print(result98[0][0])
# cursor.execute('create table biao1(id varchar(20) primary key, content varchar(20))')
# cursor.close()
# conn.close()
# 选择语句来查询
cursor.execute('select * from biao1 ')
# 显示查询到的所有结果
result1 = cursor.fetchall()
print(result1)
# 设置按钮状态
btn_states = True
# 互斥锁 加上互斥锁防止多线程错误
qmut_1 = QtCore.QMutex()


# 自定义QTextEdit类监听键盘事件 实现回车发送信息
class MyQTE(QtWidgets.QTextEdit):
    def __init__(self, obj, parent=None):
        super(MyQTE, self).__init__(parent)
        self.obj = obj

    # 仅在输入框内的键盘事件
    def keyPressEvent(self, event):
        if (event.key() == Qt.Key_Enter):
            print('测试：小Enter')
            self.obj.send_message()
        if (event.key() == Qt.Key_Return):
            print('测试：大Enter')
            self.obj.send_message()
        else:
            super().keyPressEvent(event)


# 自定义类 重写append方法并加上互斥锁(好像没用)
class MyQTB(QtWidgets.QTextBrowser):
    def __init__(self, obj, parent=None):
        super(MyQTB, self).__init__(parent)
        self.obj = obj

    # 加上互斥锁防止多线程错误
    def append(self, str_):
        qmut_1.lock()
        super().append(str_)
        qmut_1.unlock()



# 登录api窗口 继承自QWidget
class Ui_Form(QtWidgets.QWidget):
    # 参数mw为对象MainWindow 用以登陆窗口关闭 开启主窗口
    def __init__(self, mw):
        super().__init__()
        self.mw = mw

    def show(self):
        cursor.execute('select content from biao1 where id =?', ('box2',))
        result77 = cursor.fetchall()
        if result77[0][0] == "True":
            self.checkBox_2.setChecked(True)
            print("close")
            self.mw.show()
        else:
            super().show()

    def keyPressEvent(self, event):
        print("按下：" + str(event.key()))
        # 举例
        if (event.key() == Qt.Key_Escape):
            print('测试：ESC')
        if (event.key() == Qt.Key_A):
            print('测试：A')
        if (event.key() == Qt.Key_1):
            print('测试：1')
        if (event.key() == Qt.Key_Enter):
            print('测试：Enter')
        if (event.key() == Qt.Key_Space):
            print('测试：Space')

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            print("鼠标左键点击")
        elif event.button() == Qt.RightButton:
            print("鼠标右键点击")
        elif event.button() == Qt.MidButton:
            print("鼠标中键点击")


    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(369, 159)
        # 固定窗口大小
        Form.setFixedSize(369, 159)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 0, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.verticalLayout_5.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(Form)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.widget_2)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.widget_2)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.verticalLayout_5.addWidget(self.widget_2)
        self.widget_6 = QtWidgets.QWidget(Form)
        self.widget_6.setObjectName("widget_6")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.widget_3 = QtWidgets.QWidget(self.widget_6)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.widget_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        spacerItem1 = QtWidgets.QSpacerItem(106, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout_4.addItem(spacerItem1)
        self.horizontalLayout_2.addWidget(self.widget_3)
        self.widget_4 = QtWidgets.QWidget(self.widget_6)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget_4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.checkBox = QtWidgets.QCheckBox(self.widget_4)
        self.checkBox.setObjectName("checkBox")
        self.verticalLayout_3.addWidget(self.checkBox)
        self.checkBox_2 = QtWidgets.QCheckBox(self.widget_4)
        self.checkBox_2.setObjectName("checkBox_2")
        self.verticalLayout_3.addWidget(self.checkBox_2)
        self.horizontalLayout_2.addWidget(self.widget_4)
        self.widget_5 = QtWidgets.QWidget(self.widget_6)
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_5)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.widget_5)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton)
        spacerItem2 = QtWidgets.QSpacerItem(20, 6, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem2)
        self.horizontalLayout_2.addWidget(self.widget_5)
        self.verticalLayout_5.addWidget(self.widget_6)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        Form.setWindowIcon(QIcon('gpt.png'))
        # 按下完成就关闭login窗口 打开新窗口
        self.pushButton.clicked.connect(self.mwfunc)
        # 在输入文本框按下回车就关闭login窗口 打开新窗口
        self.lineEdit.returnPressed.connect(self.mwfunc)
        # 文本框虚字
        self.lineEdit.setPlaceholderText("在此输入")

        # 是否记住api
        # self.checkBox.clicked['bool'].connect(self.testfunc)
        # 是否开启登陆窗口
        # self.checkBox_2.clicked['bool'].connect(self.testfunc2)

        # 如果数据库里box1为TRUE
        cursor.execute('select content from biao1 where id =?', ('box1',))
        result77 = cursor.fetchall()
        if result77[0][0] == "True":
            # 勾选框
            self.checkBox.setChecked(True)
            # 设置内容
            self.lineEdit.setText(result98[0][0])
            # 全选内容
            self.lineEdit.selectAll()
            # 显示格式
            # self.lineEdit.setAlignment(Qt.AlignLeft)


    # 把数据库box1的值改为True或False
    def testfunc(self):
        # print("testfunc")
        # print(self.checkBox.isChecked())
        if self.checkBox.isChecked():
            cursor.execute('update biao1 set content = ? where id = ?', ("True", "box1"))
            conn.commit()
        else:
            cursor.execute('update biao1 set content = ? where id = ?', ("False", "box1"))
            conn.commit()

    # 把数据库box2的值改为True或False
    def testfunc2(self):
        print("testfunc2")
        if self.checkBox_2.isChecked():
            cursor.execute('update biao1 set content = ? where id = ?', ("True", "box2"))
            conn.commit()
        else:
            cursor.execute('update biao1 set content = ? where id = ?', ("False", "box2"))
            conn.commit()

    # 关闭login窗口 打开main窗口
    def mwfunc(self):
        # 查询api是否已有 已存在则不插入
        result = cursor.execute('select * from biao1 where id =?', ('api',))
        if not result:
            # 向数据库插入api和api值 插入已存在的值会bug退出
            cursor.execute('insert into biao1(id,content) values("api2","' + self.lineEdit.text() + '")')
        else:
            # 弹出窗口询问是否替换api QMessageBox其返回结果是一个QMessageBox.StandardButton枚举类型变量
            # 参考资料：https://blog.csdn.net/zhaodongdz/article/details/122563003
            reply = QtWidgets.QMessageBox.information(self, "警告", "已有api，是否替换？", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
            if reply == QtWidgets.QMessageBox.Yes:
                print("yes")
                # 修改语句修改数据库api
                cursor.execute('update biao1 set content = ? where id = ?', (self.lineEdit.text(), "api"))
            else:
                print("no")
        # 提交实务？
        conn.commit()
        self.mw.show()
        self.close()
        # 向数据库更新box12状态
        self.testfunc()
        self.testfunc2()


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "SimpleGPT"))
        self.label.setText(_translate("Form", "请输入api密匙："))
        self.checkBox.setText(_translate("Form", "记住密匙"))
        self.pushButton.setText(_translate("Form", "完成"))
        self.checkBox_2.setText(_translate("Form", "下次不开启"))


# 自定义信号类
class WorkerSignals(QtCore.QObject):
    '''
    Defines the signals available from a running worker thread.
    '''
    # 必须实例化对象才能调用类变量...吗
    t2signal = QtCore.pyqtSignal()
    # t2signal2 = QtCore.pyqtSignal()
    finished = QtCore.pyqtSignal()
    error = QtCore.pyqtSignal(tuple)
    progress = QtCore.pyqtSignal(float)


# 创建线程类复位按钮
class Thread(QThread):
    # 创建对象时的自动初始化参数，带参构造函数，bts为qt对象?
    def __init__(self, bts):
        super(Thread, self).__init__()
        self.bts = bts

    def run(self):     # 重写run()方法 当对象调用.start()方法时 自动调用run方法
        print("线程1开始")
        time.sleep(10)
        print("线程1结束")
        # 10秒后恢复按钮
        self.bts.pushButton.setEnabled(True)
        global btn_states
        btn_states = True


# 创建线程类给gpt发prompt
class Thread2(QThread):
    # 创建对象时的自动初始化参数，带参构造函数，bts为qt对象?
    def __init__(self, bts):
        super(Thread2, self).__init__()
        self.bts = bts

    def run(self):     # 重写run()方法
        # 设置发送按钮失效
        self.bts.pushButton.setEnabled(False)
        print("线程2开始")
        try:

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                # 消息数据结构是列表[]，里面放的字典{}，只需把之前的对话+到消息列表[]里一起发过去
                messages=self.bts.history + [
                    {"role": "user", "content": self.bts.prompt}
                ]
            )
            answer = completion.choices[0].message.content
            # openai限制了免费用户每分钟访问次数 只能出此下策
            # 在pyqt下sleep会导致无响应 不能搞
            # i = 10
            # while i > 0:
            #     print("冷却中，请等待", i, "秒……")
            #     time.sleep(5)
            #     i = i - 5

            # thread线程开始 10秒后复位按钮
            self.bts.thread.start()

            print(answer)
            # 给bower框加上gpt说的话 备用颜色蓝#42426F 深蓝#00009C
            self.bts.textBrowser.append("<font color=\"#3232CD\">"+"GPT说:" + answer + "</font> ")
            # 字超出滑动条自动下移（未测试不知有无bug）
            self.cursor = self.bts.textBrowser.textCursor()
            self.bts.textBrowser.moveCursor(self.cursor.End)
            # 计算token费用
            ttk = round((completion.usage.total_tokens * 0.000002), 4)
            print("token:", completion.usage.total_tokens,
                  " 花费:", ttk, "美元")
            # 花费显示右上角
            self.bts.lcdNumber.setDigitCount(8)
            self.bts.lcdNumber.setSmallDecimalPoint(False)
            self.bts.lcdNumber.display(ttk)
            self.bts.history = self.bts.history + [{"role": "user", "content": self.bts.prompt}] + [
                {"role": "assistant", "content": answer}]
            # 终止计时线程
            self.bts.thread3.terminate()
            print("线程2结束")
        except:
            # 发射自定义信号
            self.bts.workerSignals.t2signal.emit()
            # thread线程开始 10秒后复位按钮
            self.bts.thread.start()
            print("openai官网未响应，请检查你的科学工具或api")
            print("线程2结束")

# 创建线程计算线程2是否超时
class Thread3(QThread):
    # 创建对象时的自动初始化参数，带参构造函数，bts为qt对象?
    def __init__(self, bts):
        super(Thread3, self).__init__()
        self.bts = bts

    def run(self):
        print("线程3已开始")
        time.sleep(15)
        # 10秒后终止线程2 超时了
        print("开始终止线程2")
        # 可用quit方法 stop方法会报错 quit exit方法没用 terminate有用
        self.bts.thread2.terminate()
        self.bts.thread.start()

        self.bts.workerSignals.t2signal.emit()
        print("线程3已结束")

# 播放你干嘛
class Thread4(QThread):
    # 创建对象时的自动初始化参数，带参构造函数，bts为qt对象?
    def __init__(self, bts):
        super(Thread4, self).__init__()
        self.bts = bts

    def run(self):
        file = QtCore.QUrl.fromLocalFile("你干嘛哎呦.mp3")
        content = QtMultimedia.QMediaContent(file)
        player = QtMultimedia.QMediaPlayer()
        player.setMedia(content)
        player.setVolume(100)
        player.play()
        time.sleep(4)

# 播放你干嘛
class Thread5(QThread):
    # 创建对象时的自动初始化参数，带参构造函数，bts为qt对象?
    def __init__(self, bts):
        super(Thread5, self).__init__()
        self.bts = bts

    def run(self):
        file = QtCore.QUrl.fromLocalFile("你干嘛手机铃.mp3")
        content = QtMultimedia.QMediaContent(file)
        self.player = QtMultimedia.QMediaPlayer()
        self.player.setMedia(content)
        self.player.setVolume(100)
        self.player.play()
        time.sleep(65)
        self.player.stop()

# 播放你干嘛
class Thread6(QThread):
    # 创建对象时的自动初始化参数，带参构造函数，bts为qt对象?
    def __init__(self, bts):
        super(Thread6, self).__init__()
        self.bts = bts

    def run(self):
        file = QtCore.QUrl.fromLocalFile("你太美好莱坞.mp3")
        content = QtMultimedia.QMediaContent(file)
        self.player = QtMultimedia.QMediaPlayer()
        self.player.setMedia(content)
        self.player.setVolume(100)
        self.player.play()
        time.sleep(57)
        self.player.stop()


# 播放线程五的歌词
class Thread7(QThread):
    # 创建对象时的自动初始化参数，带参构造函数，bts为qt对象?
    def __init__(self, bts):
        super(Thread7, self).__init__()
        self.bts = bts

    def run(self):
        geci = ['你', '干', '嘛', '啊', '啊', '啊', '啊', '啊', '啊', '哎', '哟', '你', '干', '嘛', '啊', '啊', '啊', '啊',
                '啊', '啊', '哎', '哟', '你', '干', '嘛', '啊', '啊', '啊', '啊', '啊', '啊', '哎', '哟', '你', '好', '烦',
                '你', '干', '嘛', '你', '干', '嘛', '你', '干', '嘛', '哎', '呦', '你', '干', '嘛', '你', '干', '嘛', '你',
                '干', '嘛', '哎', '呦', '你', '干', '嘛', '你', '干', '嘛', '干', '嘛', '你', '干', '嘛', '你', '干', '嘛',
                '干', '嘛', '你', '干', '嘛', '你', '干', '嘛', '干', '嘛', '你', '干', '嘛', '你', '干', '嘛', '干', '嘛',
                '你', '干', '嘛', '你', '干', '嘛', '干', '嘛', '你', '干', '嘛', '你', '干', '嘛', '干', '嘛', '你', '干',
                '嘛', '你', '干', '嘛', '干', '嘛', '你', '干', '嘛', '你', '干', '嘛', '干', '嘛', '你', '干', '嘛', '你',
                '干', '嘛', '干', '嘛', '你', '干', '嘛', '你', '干', '嘛', '干', '嘛', '你', '干', '嘛', '啊',  '啊', '啊',
                '你', '干', '嘛',
                '干', '嘛', '啊', '啊', '你', '干', '嘛', '啊', '啊', '啊', '你', '干', '嘛', '干', '嘛', '你', '干', '嘛', '你', '干',
                '嘛', '你', '干', '嘛', '你', '干', '嘛', '啊', '啊', '啊',
                '干', '嘛',
                '干', '嘛', '干', '嘛', '干', '嘛', '你', '干', '嘛', '哎', '呦', '呦', '干', '嘛', '干', '嘛', '干', '嘛', '干', '嘛',
                '你', '干', '嘛', '哎', '呦']
        yanse = ['#FFB7DD', '#FF88C2', '#FF44AA', '#FF0088', '#C10066', '#A20055', '#8C0044', '#FFCCCC', '#FF8888',
                 '#FF3333', '#FF0000', '#CC0000', '#AA0000', '#880000', '#FFC8B4', '#FFA488', '#FF7744', '#FF5511',
                 '#E63F00', '#C63300', '#A42D00', '#FFDDAA', '#FFBB66', '#FFAA33', '#FF8800', '#EE7700', '#CC6600',
                 '#BB5500', '#FFEE99', '#FFDD55', '#FFCC22', '#FFBB00', '#DDAA00', '#AA7700', '#886600', '#FFFFBB',
                 '#FFFF77', '#FFFF33', '#FFFF00', '#EEEE00', '#BBBB00', '#888800', '#EEFFBB', '#DDFF77', '#CCFF33',
                 '#BBFF00', '#99DD00', '#88AA00', '#668800', '#CCFF99', '#BBFF66', '#99FF33', '#77FF00', '#66DD00',
                 '#55AA00', '#227700', '#99FF99', '#66FF66', '#33FF33', '#00FF00', '#00DD00', '#00AA00', '#008800',
                 '#BBFFEE', '#77FFCC', '#33FFAA', '#00FF99', '#00DD77', '#00AA55', '#008844', '#AAFFEE', '#77FFEE',
                 '#33FFDD', '#00FFCC', '#00DDAA', '#00AA88', '#008866', '#99FFFF', '#66FFFF', '#33FFFF', '#00FFFF',
                 '#00DDDD', '#00AAAA', '#008888', '#CCEEFF', '#77DDFF', '#33CCFF', '#00BBFF', '#009FCC', '#0088A8',
                 '#007799', '#CCDDFF', '#99BBFF', '#5599FF', '#0066FF', '#0044BB', '#003C9D', '#003377', '#CCCCFF',
                 '#9999FF', '#5555FF', '#0000FF', '#0000CC', '#0000AA', '#000088', '#CCBBFF', '#9F88FF', '#7744FF',
                 '#5500FF', '#4400CC', '#2200AA', '#220088', '#D1BBFF', '#B088FF', '#9955FF', '#7700FF', '#5500DD',
                 '#4400B3', '#3A0088', '#E8CCFF', '#D28EFF', '#B94FFF', '#9900FF', '#7700BB', '#66009D', '#550088',
                 '#F0BBFF', '#E38EFF', '#E93EFF', '#CC00FF', '#A500CC', '#7A0099', '#660077', '#FFB3FF', '#FF77FF',
                 '#FF3EFF', '#FF0 0F', '#CC00CC', '#990099', '#770077']
        time.sleep(1.1)

        for i in geci:
            # randint(a,b)左闭右闭 别搞错了越界就gg
            self.bts.textBrowser.append("<div style='font-size: "+str(random.randint(50, 200))+"px; color:"
                                        + yanse[random.randint(0, len(yanse)-1)]+"'>"+i+"</div>\n")
            # 字超出滑动条自动下移
            self.cursor = self.bts.textBrowser.textCursor()
            self.bts.textBrowser.moveCursor(self.cursor.End)
            time.sleep(0.3)


# object写不写都一个意思 就是空
class Ui_MainWindow(object):
    # 定义一个信号 必须是类属性 这里好像还要继承Qobject才能定义啥的 mgb垃圾qt
    # t2signal = QtCore.pyqtSignal()
    # 这里MainWindow才是QMainWindow的对象
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(375, 401)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setContentsMargins(5, 10, 5, 10) # 左上右下
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_6.setContentsMargins(10, 10, 10, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(0, -1, -1, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setTextFormat(QtCore.Qt.PlainText)
        self.label.setScaledContents(False)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setMinimumSize(QtCore.QSize(10, 0))
        self.label_3.setSizeIncrement(QtCore.QSize(0, 0))
        self.label_3.setBaseSize(QtCore.QSize(0, 0))
        self.label_3.setAutoFillBackground(False)
        self.label_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_3.setLineWidth(0)
        self.label_3.setMidLineWidth(0)
        self.label_3.setTextFormat(QtCore.Qt.AutoText)
        self.label_3.setScaledContents(False)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setWordWrap(False)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.lcdNumber = QtWidgets.QLCDNumber(self.frame)
        self.lcdNumber.setMaximumSize(QtCore.QSize(16777215, 30))
        self.lcdNumber.setSmallDecimalPoint(True)
        self.lcdNumber.setDigitCount(8)
        self.lcdNumber.setMode(QtWidgets.QLCDNumber.Dec)
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdNumber.setProperty("value", 0.0)
        self.lcdNumber.setObjectName("lcdNumber")
        self.horizontalLayout.addWidget(self.lcdNumber)
        spacerItem2 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 1)
        self.horizontalLayout.setStretch(2, 11)
        self.horizontalLayout_6.addLayout(self.horizontalLayout)
        self.verticalLayout_3.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_2.setLineWidth(0)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser.sizePolicy().hasHeightForWidth())
        self.textBrowser.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.textBrowser.setFont(font)
        self.textBrowser.setFrameShape(QtWidgets.QFrame.Box)
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout_4.addWidget(self.textBrowser)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_3.setContentsMargins(-1, 5, -1, -1)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 30))
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        spacerItem4 = QtWidgets.QSpacerItem(30, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.horizontalLayout_3.setStretch(0, 1)
        self.horizontalLayout_3.setStretch(1, 1)
        self.horizontalLayout_3.setStretch(2, 11)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.verticalLayout_3.addWidget(self.frame_2)
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        # 自定义修改
        self.textEdit = MyQTE(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setMaximumSize(QtCore.QSize(16777215, 200))
        self.textEdit.setObjectName("textEdit")
        self.horizontalLayout_2.addWidget(self.textEdit)
        spacerItem5 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem5)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem6)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton.setMaximumSize(QtCore.QSize(100, 100))
        self.pushButton.setBaseSize(QtCore.QSize(0, 0))
        self.pushButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton.setAutoDefault(True)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem7)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem8 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem8)
        self.toolButton = QtWidgets.QToolButton(self.widget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.toolButton.setPalette(palette)
        self.toolButton.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.toolButton.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.toolButton.setAutoFillBackground(False)
        self.toolButton.setStyleSheet("background-color:rgb(240,240,240);\n"
                                      "border:none;\n"
                                      "\n"
                                      "")
        self.toolButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("设置 (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton.setIcon(icon)
        self.toolButton.setObjectName("toolButton")
        self.horizontalLayout_5.addWidget(self.toolButton)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.verticalLayout_2.setStretch(0, 3)
        self.verticalLayout_2.setStretch(1, 1)
        self.verticalLayout_2.setStretch(2, 8)
        self.verticalLayout_2.setStretch(3, 1)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.horizontalLayout_2.setStretch(0, 20)
        self.horizontalLayout_2.setStretch(2, 1)
        self.horizontalLayout_7.addLayout(self.horizontalLayout_2)
        self.verticalLayout_3.addWidget(self.widget)
        self.verticalLayout_3.setStretch(0, 1)
        self.verticalLayout_3.setStretch(1, 8)
        self.verticalLayout_3.setStretch(2, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(self.textEdit.copy)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 以下为自定义（上面有一些类也自定义更改了）
        # 自定义右上角$颜色 最后250是透明度
        self.label_3.setStyleSheet("QLabel{color:rgb(190,200,200,250)}")
        # 这句好像没啥用
        self.lcdNumber.setStyleSheet("QLCDNumber{font-size: 80px}")
        # 按钮连接槽函数
        self.pushButton.clicked.connect(self.send_message)  # type: ignore
        self.mw = MainWindow
        self.history = []
        self.prompt = ""
        # 自定义信号连接到t2func 必须实例化对象才能调用类属性吗
        self.workerSignals = WorkerSignals()
        self.workerSignals.t2signal.connect(self.t2func)

        # 创建线程对象 把qt对象传过去
        # 线程1为复位按钮
        self.thread = Thread(self)
        # 线程2是发消息给gpt 然后调用线程1复位按钮
        self.thread2 = Thread2(self)
        # 线程3是判断2超时没
        self.thread3 = Thread3(self)
        # 线程4是播放你干嘛
        self.thread4 = Thread4(self)
        # 线程5是播放你干嘛
        self.thread5 = Thread5(self)
        # 线程6是播放你干嘛
        self.thread6 = Thread6(self)
        # 线程7是播放你干嘛5歌词
        self.thread7 = Thread7(self)
        # 设置窗口小图标
        MainWindow.setWindowIcon(QIcon('gpt.png'))
        # 测试鼠标右键菜单
        MainWindow.setContextMenuPolicy(Qt.CustomContextMenu)
        MainWindow.customContextMenuRequested.connect(self.generateMenu)
        # 工具栏菜单
        self.toolButton.clicked.connect(self.generateMenu2)


    def generateMenu2(self):
        self.menu2 = QtWidgets.QMenu()
        item1 = self.menu2.addAction("重新设定api")
        item2 = self.menu2.addAction("保存当前对话")
        item3 = self.menu2.addAction("读取对话")
        item1.triggered.connect(self.api_set)
        self.menu2.popup(QtGui.QCursor.pos())

    def api_set(self):
        cursor.execute('update biao1 set content = ? where id = ?', ("False", "box2"))
        conn.commit()
        QtWidgets.QMessageBox.information(self.mw, "成功", "设定成功，下次打开将启动api输入窗",
                                          QtWidgets.QMessageBox.Ok)


    # 鼠标右键菜单
    def generateMenu(self):
        # print("123")
        self.menu = QtWidgets.QMenu()
        item1 = self.menu.addAction("你")
        item2 = self.menu.addAction("干")
        item3 = self.menu.addAction("嘛")
        self.menu.popup(QtGui.QCursor.pos())
        item1.triggered.connect(self.niganma)
        item2.triggered.connect(self.niganma2)
        item3.triggered.connect(self.niganma3)


    # thread4的play不加self terminate后还会继续播放 以此实现一直鸡叫
    def niganma(self):
        if self.thread4.isRunning():
            self.thread4.terminate()
            self.thread4.start()
        else:
            self.thread4.start()
    def niganma2(self):
        if self.thread5.isRunning():
            self.thread5.player.stop()
            self.thread5.terminate()
            self.thread7.terminate()
        else:
            self.thread5.start()
            # bug最多线程
            self.textBrowser.clear()
            self.thread7.start()
    def niganma3(self):
        if self.thread6.isRunning():
            self.thread6.player.stop()
            self.thread6.terminate()
        else:
            self.thread6.start()

    def t2func(self):
        reply = QtWidgets.QMessageBox.information(self.mw, "警告", "请求无响应，请检查科学工具或api",
                                                  QtWidgets.QMessageBox.Ok)
        if reply == QtWidgets.QMessageBox.Yes:
            print("yes")
        else:
            print("no")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SimpleGPT"))
        self.label.setText(_translate("MainWindow", "Outcome"))
        self.label_3.setText(_translate("MainWindow", "$"))
        self.label_2.setText(_translate("MainWindow", "income"))
        self.pushButton.setText(_translate("MainWindow", "Send"))



    # 给browser发消息
    def send_message(self):
        global btn_states
        if btn_states:
            # 测试 未知原因有时我的字体会变蓝色 加上"</font>"试试能不能纠正
            self.textBrowser.append("你说:"+(self.textEdit.toPlainText()))
            self.prompt = self.textEdit.toPlainText()
            self.textEdit.clear()
            # 给gpt发消息
            self.thread2.start()
            # 开始计时10s后终止线程2
            self.thread3.start()
            btn_states = False
            print("send_message执行完毕")
        else:
            print("send_message不能执行")

    # 给gpt发消息 被thread2代替 弃用
    def gpt_get(self):
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            # 消息数据结构是列表[]，里面放的字典{}，只需把之前的对话+到消息列表[]里一起发过去
            messages=self.history + [
                {"role": "user", "content": self.prompt}
            ]
        )
        answer = completion.choices[0].message.content
        # openai限制了免费用户每分钟访问次数 只能出此下策
        # 在pyqt下sleep会导致无响应 不能搞
        # i = 10
        # while i > 0:
        #     print("冷却中，请等待", i, "秒……")
        #     time.sleep(5)
        #     i = i - 5

        # 设置发送按钮失效
        self.pushButton.setEnabled(False)
        # thread线程开始 10秒后复位按钮
        self.thread.start()

        print(answer)
        # 给bower框加上gpt说的话
        self.textBrowser.append("GPT说:" + answer)
        # 计算token费用
        print("token:", completion.usage.total_tokens,
              " 花费:", round((completion.usage.total_tokens * 0.000002), 4), "美元")
        #
        self.history = self.history + [{"role": "user", "content": self.prompt}] + [
            {"role": "assistant", "content": answer}]




import sys
# 查看qt版本
print(QtCore.QT_VERSION_STR)
# 网上查的自适应字体 防止高分辨率字体遮盖
QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)

app = QtWidgets.QApplication(sys.argv)

# 主窗口代码 为QMainWindow对象
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
# MainWindow.show()

# 登录窗口代码 为QWidget对象
# 其实也可以下面这样写
ui2 = Ui_Form(MainWindow)
ui2.setupUi(ui2)
ui2.show()

sys.exit(app.exec_())